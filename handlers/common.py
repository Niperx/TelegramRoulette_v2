import logging
import sqlite3
import asyncio
from db.db_manage import *
from config import TOKEN
from datetime import datetime
from aiogram import Bot, types, Router, F
from aiogram.filters.command import Command

from modules.buttons_list import *

bot = Bot(token=TOKEN)
router = Router()


def get_info_about_user_message(message):  # –ò–Ω—Ñ–∞ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    text = f'\n##### {datetime.now()} #####\n'
    text += f'ID: {message.from_user.id}, Text: {message.text}, Chat ID: {message.chat.id}'
    try:
        text += f'\nUsername: {message.from_user.username},' \
                f' Name: {message.from_user.first_name},' \
                f' Surname: {message.from_user.last_name} '
    except Exception as e:
        logging.exception(e)
        text += '–ù–µ—Ç –∏–º–µ–Ω–∏'
    return text


def get_info_about_user_callback(callback):  # –ò–Ω—Ñ–∞ –æ –∫–æ–ª–ª–±–µ–∫–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    text = f'\n##### {datetime.now()} #####\n'
    text += f'ID: {callback.from_user.id}, Text: {callback.data}'
    try:
        text += f'\nUsername: {callback.from_user.username},' \
                f' Name: {callback.from_user.first_name},' \
                f' Surname: {callback.from_user.last_name} '
    except Exception as e:
        logging.exception(e)
        text += '–ù–µ—Ç –∏–º–µ–Ω–∏'
    return text


@router.message(Command('start'))
async def cmd_start(message: types.Message):
    print(get_info_about_user_message(message))
    user_id = message.from_user.id
    balance = 10000
    chk = await check_user_id(user_id)
    if not chk:
        code = message.text
        code = code[code.find(' ') + 1:]
        print(f'–≠–¢–û –ö–û–î –†–ï–§–ï–†–ê–õ–ê {code}')
        if code.isdigit() and code != message.from_user.id:
            chk_ref = await check_user_id(int(code))
            if not chk_ref:
                code = None
            else:
                code = int(code)
                balance += 50000
                if message.from_user.username is not None:
                    await bot.send_message(chat_id=code,
                                           text=f'–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª {message.from_user.first_name}'
                                                f' - @{message.from_user.username})')
                else:
                    await bot.send_message(chat_id=code,
                                           text=f'–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª {message.from_user.first_name}')
        else:
            code = None
        await create_user(user_id, message.from_user.username, balance, code)

    text = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç—Ç–æ  üé∞ <b>–ß—ë—Ä—Ç–æ–≤–æ –ö–∞–∑–∏–Ω–æ</b> üé∞'
    await message.answer(text, reply_markup=get_menu_kb(), parse_mode='HTML')


@router.message(F.text == 'üí∞ Balance')
async def cmd_check_balance(message: types.Message):
    print(get_info_about_user_message(message))
    user_id = message.from_user.id
    balance = await get_balance(user_id)
    text = f'{balance}'
    await message.answer(text, reply_markup=get_menu_kb())


@router.message(F.text == 'üìà Leaders')
async def cmd_check_balance(message: types.Message):
    print(get_info_about_user_message(message))
    user_id = message.from_user.id

    lead_text = "‚≠êÔ∏è –¢–û–ü-10 –±–æ–≥–∞—Ç–µ–π—à–∏—Ö –ª—é–¥–µ–π —ç—Ç–æ–≥–æ —á—ë—Ä—Ç–æ–≤–æ –∫–∞–∑–∏–Ω–æ! ‚≠êÔ∏èÔ∏è \n\n"
    tops_db = await get_leaders(10)

    i = 0
    for top in tops_db:
        i += 1
        smile = ''
        if i <= 3:
            match i:
                case 1:
                    smile = 'ü•á '
                case 2:
                    smile = 'ü•à '
                case 3:
                    smile = 'ü•â '
        else:
            smile = 'üéó '
        you_mark = ''
        if message.from_user.username == top[0]:
            you_mark = '(You)'

        lead_text += f'{smile} {i}. @{top[0]} - {top[1]} –∫–æ–∏–Ω–æ–≤. {smile} {you_mark}\n'

    await message.answer(lead_text, reply_markup=get_menu_kb())


#
#
# @router.message(F.text == 'üì∫ –í–∏–¥–µ–æ –∏–Ω—Å—Ä—É–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
# async def cmd_raffle_info(message: types.Message):
#     print(get_info_about_user_message(message))
#     text = 'https://youtu.be/SWxzCXslK8k'
#     await message.answer(text, reply_markup=get_menu_kb())
#
#
# @router.message(F.text == 'üéÅ –ü—Ä–∏–∑—ã')
# async def cmd_raffle_info(message: types.Message):
#     print(get_info_about_user_message(message))
#     text = '–£ –Ω–∞—Å 3 –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å:\n' \
#            'ü•á 1 –º–µ—Å—Ç–æ - –ø—Ä–∏–∑ 30$\n' \
#            'ü•à 2 –º–µ—Å—Ç–æ - –ø—Ä–∏–∑ 20$\n' \
#            'ü•â 3 –º–µ—Å—Ç–æ - –ø—Ä–∏–∑ 10$\n'
#     await message.answer(text, reply_markup=get_menu_kb())
#
#
# @router.message(Command(commands=["cancel"]))
# @router.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
# async def cmd_cancel(message: types.Message, state: FSMContext):
#     await state.clear()
#     await message.answer(
#         text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
#         reply_markup=get_menu_kb()
#     )




# @router.message(F.text == 'üíµ –ñ–ú–ò –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å')
# async def cmd_reg(message: types.Message, state: FSMContext):
#     print(get_info_about_user_message(message))
#     x = await check_user_id(message.from_user.id)
#     if x:
#         await message.answer('–¢—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–∞—Ö, –¥—Ä—É–∂–æ—á–µ–∫', reply_markup=get_menu_kb())
#     else:
#         # —Ç—É—Ç –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
#         # await create_user(message.from_user.id, '1111', message.from_user.username,
#         #                   f'https://t.me/id{message.from_user.id}')
#
#         await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à UID –Ω–∞ BingX (—Ü–∏—Ñ—Ä—ã)', reply_markup=get_cancel_kb())
#         await state.set_state(RegComp.giving_uid)


# @router.message(RegComp.giving_uid,
#                 F.text)
# async def cmd_give_uid(message: types.Message, state: FSMContext):
#     print(get_info_about_user_message(message))
#     try:
#         uid = int(message.text.lower())
#         chk = await check_uid(uid)
#         if chk:
#             await message.answer(
#                 text='–¢–∞–∫–æ–π UID —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑',
#                 reply_markup=get_cancel_kb())
#         else:
#             await state.update_data(uid=message.text.lower())
#             await message.answer(
#                 text='–í–∫–ª—é—á–∏—Ç–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ "DEPOSIT BOOSTER # 1" –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –°–ö–†–ò–ù–®–û–¢\n\n'
#                      '–í–∏–¥–µ–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å - https://youtu.be/SWxzCXslK8k',
#                 reply_markup=get_cancel_kb())
#             await state.set_state(RegComp.giving_photo)
#     except:
#         await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π UID', reply_markup=get_menu_kb())
#         await state.clear()
#
#
# @router.message(RegComp.giving_photo,
#                 F.photo)
# async def cmd_give_photo(message: types.Message, state: FSMContext):
#     print(get_info_about_user_message(message))
#     await message.forward(503516164)
#     user_data = await state.get_data()
#     if message.from_user.username:
#         await bot.send_message(503516164,
#                                f'ID: #^{message.from_user.id}^#\n#*<a href="https://t.me/{message.from_user.username}">{message.from_user.username}</a>*#\nUID: ^^{user_data["uid"]}^^',
#                                parse_mode='HTML', reply_markup=get_aprove_kb())
#         await message.answer('–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ, –æ–∂–∏–¥–∞–π—Ç–µ...', reply_markup=get_menu_kb())
#
#     else:
#         await message.answer('–£–ø—Å! –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏–∫–Ω–µ–π–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ, —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
#     await state.clear()
#
#
# @router.callback_query(F.data.startswith('aprove_'))
# async def callbacks_aprove(callback: types.CallbackQuery):
#     action = callback.data.split('_')[-1]
#     print(action)
#     text = callback.message.text
#     user_id = text[text.find('#^') + 2:text.find('^#')]
#     user_link = text[text.find('#*') + 2:text.find('*#')]
#     user_uid = text[text.find('^^') + 2:text.rfind('^^')]
#     if action == 'yes':
#         print(user_id, user_link, user_uid)
#         await create_user(user_id, user_uid, link=f'https://t.me/{user_link}')
#         num = await get_number(user_id)
#         await bot.send_message(int(user_id), f'–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {num}\n\n'
#                                              '‚ñ™Ô∏è –ö–∞–Ω–∞–ª –±–æ—Ç–∞ - https://t.me/+-pCJY2_O-Js3OTUy\n\n'
#                                              '‚ñ™Ô∏è –ß–∞—Ç –±–æ—Ç–∞ - https://t.me/+WndscOY7L9I5NDdi')
#     elif action == 'no':
#         await bot.send_message(int(user_id), '–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')
#     text = f'ID: {user_id}\n' \
#            f'Username: @{user_link}\n' \
#            f'UID: {user_uid}'
#     await callback.message.edit_text(text, parse_mode='HTML')


import logging
from db.db_manage import *
from config import TOKEN
from datetime import datetime
from aiogram import Bot, types, Router, F
from aiogram.filters import CommandStart, CommandObject
from aiogram.utils.deep_linking import create_start_link

from modules.buttons_list import *

bot = Bot(token=TOKEN)
router = Router()


async def get_info_about_user_message(message):  # –ò–Ω—Ñ–∞ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    text = f'\n##### {datetime.now()} #####\n'
    text += f'ID: {message.from_user.id}, Text: {message.text}, Chat ID: {message.chat.id}'
    try:
        text += f'\nUsername: {message.from_user.username},' \
                f' Name: {message.from_user.first_name},' \
                f' Surname: {message.from_user.last_name} '
    except Exception as e:
        logging.exception(e)
        text += '–ù–µ—Ç –∏–º–µ–Ω–∏'
    return text


async def get_info_about_user_callback(callback):  # –ò–Ω—Ñ–∞ –æ –∫–æ–ª–ª–±–µ–∫–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    text = f'\n##### {datetime.now()} #####\n'
    text += f'ID: {callback.from_user.id}, Text: {callback.data}'
    try:
        text += f'\nUsername: {callback.from_user.username},' \
                f' Name: {callback.from_user.first_name},' \
                f' Surname: {callback.from_user.last_name} '
    except Exception as e:
        logging.exception(e)
        text += '–ù–µ—Ç –∏–º–µ–Ω–∏'
    return text


@router.message(CommandStart(deep_link=True))
async def cmd_start(message: types.Message, command: CommandObject):
    print(await get_info_about_user_message(message))
    await bot.send_chat_action(chat_id=message.chat.id, action='typing')

    user_id = message.from_user.id
    chk = await check_user_id(user_id)
    if not chk:
        balance = 10000
        code = command.args
        if code.isdigit() and code != message.from_user.id:
            chk_ref = await check_user_id(int(code))
            if not chk_ref:
                code = None
            else:
                code = int(code)
                balance += 40000
                if message.from_user.username is not None:
                    await bot.send_message(chat_id=code,
                                           text=f'–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª {message.from_user.first_name}'
                                                f' - @{message.from_user.username}')
                else:
                    await bot.send_message(chat_id=code,
                                           text=f'–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª {message.from_user.first_name}')
                await add_money(code, balance)
        else:
            code = None
        await create_user(user_id, message.from_user.username, balance, code)

    text = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç—Ç–æ  üé∞ <b>–ß—ë—Ä—Ç–æ–≤–æ –ö–∞–∑–∏–Ω–æ</b> üé∞'
    await message.answer(text, reply_markup=get_menu_kb(), parse_mode='HTML')


@router.message(F.text == 'üí∞ Balance')
async def cmd_check_balance(message: types.Message):
    print(await get_info_about_user_message(message))
    await bot.send_chat_action(chat_id=message.chat.id, action='typing')

    user_id = message.from_user.id
    balance = await get_balance(user_id)
    text = (f'ü™ô <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> ü™ô\n'
            f'{balance}')
    await message.answer(text, reply_markup=get_menu_kb(), parse_mode='HTML')


@router.message(F.text == 'üìà Leaders')
async def cmd_check_leaders(message: types.Message):
    print(await get_info_about_user_message(message))
    await bot.send_chat_action(chat_id=message.chat.id, action='typing')

    lead_text = "‚≠êÔ∏è <b>–¢–û–ü-10 –±–æ–≥–∞—Ç–µ–π—à–∏—Ö –ª—é–¥–µ–π —ç—Ç–æ–≥–æ —á—ë—Ä—Ç–æ–≤–æ –∫–∞–∑–∏–Ω–æ!</b> ‚≠êÔ∏èÔ∏è \n\n"
    tops_db = await get_leaders(10)

    i = 0
    for top in tops_db:
        i += 1
        smile = ''
        if i <= 3:
            match i:
                case 1:
                    smile = 'ü•á '
                case 2:
                    smile = 'ü•à '
                case 3:
                    smile = 'ü•â '
        else:
            smile = 'üéó '
        you_mark = ''
        if message.from_user.username == top[0]:
            you_mark = '(You)'

        lead_text += f'{smile} {i}. @{top[0]} - {int(top[1])} –∫–æ–∏–Ω–æ–≤. {smile} {you_mark}\n'

    await message.answer(lead_text, reply_markup=get_menu_kb(), parse_mode='HTML')


@router.message(F.text == 'üí≤ Daily')
async def cmd_get_daily(message: types.Message):
    print(await get_info_about_user_message(message))
    await bot.send_chat_action(chat_id=message.chat.id, action='typing')
    user_id = message.from_user.id

    time_left = await check_money_time(user_id)

    if time_left // 3600 <= 23:
        end = 3600 * 24 - time_left
        end_h = int(end // 3600)
        end_m = int(end % 3600 / 60)
        text = f'ü™ô –î–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–Ω–µ—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: ü™ô \n<b>{end_h}—á. {end_m}–º.</b>'
    else:
        await add_money(user_id, 10000)
        await update_money_time(user_id)
        text = (f'ü™ô –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10000 –º–æ–Ω–µ—Ç–æ–∫ ü™ô\n'
                f'–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ–π –ø–æ—Ä—Ü–∏–µ–π —á–µ—Ä–µ–∑ <b>24—á.</b>')

    await message.answer(text, reply_markup=get_menu_kb(), parse_mode='HTML')


@router.message(F.text == 'üìä Stats')
async def cmd_check_stats(message: types.Message):
    print(await get_info_about_user_message(message))
    await bot.send_chat_action(chat_id=message.chat.id, action='typing')
    user_id = message.from_user.id
    link = await create_start_link(bot, f'{user_id}')
    text = f'<b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b> <i>(–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ)</i>\n <code>{link}</code>\n\n'

    stats = await get_stats()
    red, green, black = stats[0], stats[1], stats[2]

    text += (f'üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b> üìä\n\n'
             f'üü• –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –≤—ã–ø–∞–ª {red} —Ä–∞–∑(–∞) üü• ({round(red / (red + green + black) * 100)}%)\n\n'
             f'üü© –ó–µ–ª—ë–Ω—ã–π —Ü–≤–µ—Ç –≤—ã–ø–∞–ª {green} —Ä–∞–∑(–∞) üü© ({round(green / (red + green + black) * 100)}%)\n\n'
             f'‚¨õÔ∏è –ß—ë—Ä–Ω—ã–π —Ü–≤–µ—Ç –≤—ã–ø–∞–ª {black} —Ä–∞–∑(–∞) ‚¨õÔ∏è ({round(black / (red + green + black) * 100)}%)\n\n'
             f'–û–±—â–µ–µ —á–∏—Å–ª–æ –±—Ä–æ—Å–∫–æ–≤ - {red + green + black} —Ä–∞–∑(–∞)')

    await message.answer(text, reply_markup=get_menu_kb(), parse_mode='HTML')
